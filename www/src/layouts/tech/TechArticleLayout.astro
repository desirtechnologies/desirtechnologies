---
/**
 * @pragma layout
 * @description Layout for tech articles with content collection integration
 * @category contour.layouts.tech
 */
import BaseLayout from "@/views/Layout.astro";
import { Functional } from '@/modules/functional';

interface Props {
  title?: string;
  description?: string;
  technologies?: string[];
  complexity?: 'beginner' | 'intermediate' | 'advanced';
  codeLanguage?: string;
  publishDate?: Date;
  updatedDate?: Date;
  tags?: string[];
  featured?: boolean;
  content?: string;
  data?: any;
}

const {
  title = 'Tech Article',
  description = '',
  technologies = [],
  complexity,
  codeLanguage,
  publishDate,
  updatedDate,
  tags = [],
  featured = false,
  content,
  data = {}
} = Astro.props;

// Combine props with data from content collection
const mergedData = {
  title: data.title || title,
  description: data.description || description,
  technologies: data.technologies || technologies,
  complexity: data.complexity || complexity,
  codeLanguage: data.codeLanguage || codeLanguage,
  publishDate: data.publishDate || publishDate,
  updatedDate: data.updatedDate || updatedDate,
  tags: data.tags || tags,
  featured: data.featured || featured
};

// Format date for display
function formatDate(date?: Date): string {
  if (!date) return '';
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Complexity badge helper
function getComplexityBadge(level?: string) {
  if (!level) return '';
  
  const classes = {
    'beginner': 'bg-green-100 text-green-800',
    'intermediate': 'bg-blue-100 text-blue-800',
    'advanced': 'bg-purple-100 text-purple-800'
  };
  
  return classes[level as keyof typeof classes] || 'bg-gray-100 text-gray-800';
}

const publishedDate = formatDate(mergedData.publishDate);
const updatedDate = formatDate(mergedData.updatedDate);
---

<BaseLayout title={mergedData.title} description={mergedData.description}>
  <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <header class="mb-10">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">{mergedData.title}</h1>
      
      <p class="text-xl text-gray-600 mb-6">{mergedData.description}</p>
      
      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500 mb-6">
        {publishedDate && (
          <span class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            Published: {publishedDate}
          </span>
        )}
        
        {updatedDate && publishedDate !== updatedDate && (
          <span class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Updated: {updatedDate}
          </span>
        )}
        
        {mergedData.complexity && (
          <span class={`text-xs px-2 py-1 rounded-full ${getComplexityBadge(mergedData.complexity)}`}>
            {mergedData.complexity}
          </span>
        )}
        
        {mergedData.codeLanguage && (
          <span class="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded-full">
            {mergedData.codeLanguage}
          </span>
        )}
      </div>
      
      {mergedData.technologies && mergedData.technologies.length > 0 && (
        <div class="mb-6">
          <h2 class="text-sm font-semibold text-gray-700 mb-2">Technologies</h2>
          <div class="flex flex-wrap gap-2">
            {mergedData.technologies.map((tech: string) => (
              <span class="bg-blue-50 text-blue-700 text-xs px-2 py-1 rounded-full">
                {tech}
              </span>
            ))}
          </div>
        </div>
      )}
      
      {mergedData.tags && mergedData.tags.length > 0 && (
        <div>
          <h2 class="text-sm font-semibold text-gray-700 mb-2">Tags</h2>
          <div class="flex flex-wrap gap-2">
            {mergedData.tags.map((tag: string) => (
              <span class="bg-gray-50 text-gray-700 text-xs px-2 py-1 rounded-full">
                #{tag}
              </span>
            ))}
          </div>
        </div>
      )}
    </header>
    
    <div class="prose prose-lg max-w-none">
      {/* Render content */}
      {data.Content ? <data.Content /> : <slot />}
    </div>
    
    <div class="mt-12 pt-6 border-t border-gray-200">
      <a 
        href="/tech" 
        class="inline-flex items-center text-blue-600 hover:text-blue-800"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to Tech Articles
      </a>
    </div>
  </article>
</BaseLayout>
