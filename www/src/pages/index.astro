---
/**
 * @pragma index
 * @description Home page renderer using functional programming
 * @category contour.logos.opera
 */
import { getPageData } from "@/routes/rotas";
import { renderRoute } from "@/utils/functional-renderer";
import { Functional } from "@/modules/functional";
import { Flow } from "@/modules/flow";
import type { Component } from "@/types";
import Navigation from "@/components/shared/Navigation.astro";

// Direct import of Layout component
import BaseLayout from "@/views/Layout.astro";

// Explicitly specify that this page should be statically generated
export const prerender = true;

// Render the home route using functional utilities
const { 
  Component, 
  Layout, 
  resolvedMeta, 
  resolvedIncludes, 
  props, 
  data 
} = await renderRoute('/', getPageData);

// Prepare debug information with immutable pattern
const debugInfo = {
  path: '/',
  meta: resolvedMeta,
  props,
  includes: Object.keys(resolvedIncludes || {})
};
---

{/* Use directly imported Layout component instead of dynamically loaded one */}
<BaseLayout title={resolvedMeta?.title || "DesirTech"} description={resolvedMeta?.description || "Advanced Developer Resources & Insights"}>
  {/* No redundant Navigation component here */}
  
  {Component && Component.tag === 'ok' ? (
    <Component.value {...props} data={data} />
  ) : (
    <div class="bg-[#0c0c0c] py-16 relative overflow-hidden">
      <div class="container mx-auto px-4 z-10 relative">
        <div class="matrix-code-rain"></div>
        <h1 class="text-4xl sm:text-5xl font-bold text-[#00ff41] mb-4">{resolvedMeta?.title || 'DesirTech'}</h1>
        <p class="text-xl text-gray-300 mb-8">{resolvedMeta?.description || 'Advanced Developer Resources & Insights'}</p>
        <div class="hero-cta">
          <a href="/tech" class="matrix-btn">Explore Tech</a>
          <a href="/blog" class="matrix-btn">Read Blog</a>
        </div>
      </div>
    </div>
    
    <div class="container section-container">
      
      <h2 class="section-title">Developer Resources</h2>
      
      <div class="resources-grid">  
        {/* Tech Section */}
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">Tech Articles</h3>
          </div>
          <div class="card-body">
            <p>Explore cutting-edge technical insights on AI, web development, and emerging technologies.</p>
            <div class="tag-container">
              <span class="matrix-tag">AI</span>
              <span class="matrix-tag">Web Development</span>
              <span class="matrix-tag">TypeScript</span>
            </div>
          </div>
          <div class="card-footer">
            <a href="/tech" class="matrix-btn">
              <span class="btn-text">Access Tech Hub</span>
              <span class="btn-icon">></span>
            </a>
          </div>
        </div>
        
        {/* Blog Section */}
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">Developer Blog</h3>
          </div>
          <div class="card-body">
            <p>Dive into thought-provoking articles on functional programming, type-safety, and modern development practices.</p>
            <div class="tag-container">
              <span class="matrix-tag">Functional Programming</span>
              <span class="matrix-tag">Type Safety</span>
            </div>
          </div>
          <div class="card-footer">
            <a href="/blog" class="matrix-btn">
              <span class="btn-text">Read Articles</span>
              <span class="btn-icon">></span>
            </a>
          </div>
        </div>
        
        {/* Tools Section */}
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">Developer Tools</h3>
          </div>
          <div class="card-body">
            <p>Access powerful development tools, code examples, and utilities for advanced programming tasks.</p>
            <div class="tag-container">
              <span class="matrix-tag">API Tools</span>
              <span class="matrix-tag">Code Generators</span>
              <span class="matrix-tag">Debuggers</span>
            </div>
          </div>
          <div class="card-footer">
            <a href="/docs" class="matrix-btn">
              <span class="btn-text">Access Tools</span>
              <span class="btn-icon">></span>
            </a>
          </div>
        </div>
      </div>
        
        {/* Render includes if available */}
        {Object.entries(resolvedIncludes || {}).length > 0 && (
          <div class="includes-container my-8 p-4 border border-gray-200 rounded-lg">
            <h2 class="text-xl font-semibold mb-4">Included Components</h2>
            {Object.entries(resolvedIncludes || {}).map(([slot, component]) => {
              if (!component) return null;
              // Using special Fragment technique to avoid TypeScript errors with dynamic components
              return (
                <div class={`include include-${slot} p-3 my-2 bg-gray-50 rounded`}>
                  <h3 class="font-medium text-sm text-gray-500 mb-2">Component: {slot}</h3>
                  <div set:html={`<!-- Component: ${slot} would render here -->`} />
                </div>
              );
            })}
          </div>
        )}
        
        {/* Debug information */}
        <div class="mt-8 p-4 bg-gray-900 rounded-lg text-gray-100 font-mono">
          <div class="flex items-center justify-between mb-2">
            <h2 class="text-xl font-semibold text-blue-400">ðŸ“Š Route Debug Console</h2>
            <div class="flex space-x-2">
              <div class="w-3 h-3 rounded-full bg-red-500"></div>
              <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
              <div class="w-3 h-3 rounded-full bg-green-500"></div>
            </div>
          </div>
          
          <div class="border-t border-gray-700 pt-3">
            <div class="text-green-400 mb-1">// Route information</div>
            <div><span class="text-purple-400">const</span> <span class="text-blue-300">path</span> <span class="text-white">=</span> <span class="text-yellow-300">"{debugInfo.path}"</span>;</div>
            
            <div class="mt-3 text-green-400 mb-1">// Component resolution</div>
            <div><span class="text-purple-400">const</span> <span class="text-blue-300">component</span> <span class="text-white">=</span> <span class="text-yellow-300">"{Component && Component.tag === 'ok' ? (typeof Component.value === 'string' ? Component.value : 'Component') : 'null'}"</span>;</div>
            
            <div class="mt-3 text-green-400 mb-1">// Meta data</div>
            <div><span class="text-purple-400">const</span> <span class="text-blue-300">meta</span> <span class="text-white">=</span> <span class="text-purple-400">{</span></div>
            {Object.entries(debugInfo.meta || {}).map(([key, value]) => (
              <div class="ml-4"><span class="text-cyan-300">{key}</span><span class="text-white">:</span> <span class="text-yellow-300">"{value}"</span><span class="text-white">,</span></div>
            ))}
            <div><span class="text-purple-400">}</span>;</div>
            
            <div class="mt-3 text-green-400 mb-1">// Props</div>
            <div><span class="text-purple-400">const</span> <span class="text-blue-300">props</span> <span class="text-white">=</span> <span class="text-purple-400">{</span></div>
            {Object.entries(debugInfo.props || {}).map(([key, value]) => (
              <div class="ml-4"><span class="text-cyan-300">{key}</span><span class="text-white">:</span> <span class="text-orange-300">{typeof value === 'string' ? `"${value}"` : JSON.stringify(value)}</span><span class="text-white">,</span></div>
            ))}
            <div><span class="text-purple-400">}</span>;</div>
            
            <div class="mt-3 text-green-400 mb-1">// Includes</div>
            <div><span class="text-purple-400">const</span> <span class="text-blue-300">includes</span> <span class="text-white">=</span> <span class="text-yellow-300">[{debugInfo.includes.join(', ')}]</span>;</div>
          </div>
          
          <div class="mt-4 pt-3 border-t border-gray-700">
            <div class="text-gray-400 italic">// Full debug output</div>
            <details>
              <summary class="text-blue-400 cursor-pointer hover:text-blue-300 transition-colors">â–¾ Show raw data</summary>
              <pre class="mt-2 text-xs overflow-auto p-2 bg-gray-800 rounded text-green-200">
                {JSON.stringify(debugInfo, null, 2)}
              </pre>
            </details>
          </div>
        </div>
      </div>
    )}
  </BaseLayout>