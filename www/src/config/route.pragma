/**
 * @pragma route
 * @description Route definition for Rotas - defines application routes and navigation
 * @category contour.logos.rotas
 * 
 * Routes define the navigational structure of the application.
 * They connect URLs to views, models, and controllers in a hierarchical structure.
 */

// Define the Route shape in TOML-like syntax
pattern = "/example/:param"
type = "dynamic" # or "static", "collection", "error", "api", "content"

// Models associated with this route
[models]
  [models.exampleModel]
  name = "ExampleModel"
  validate = "function(param) { return typeof param === 'string' && param.length > 0; }"
  
  [models.exampleModel.fields]
  id = { type = "string", required = true }
  name = { type = "string", required = true }
  description = { type = "string" }
  
  [models.exampleModel.relationships]
  parent = { type = "belongsTo", model = "ParentModel" }
  children = { type = "hasMany", model = "ChildModel" }

// View configuration
[views]
component = "ExampleComponent" # Component name or inline definition
layout = "MainLayout"

  [views.props]
  showHeader = true
  maxItems = 10
  dynamic = "function(params) { return { itemId: params.param }; }"
  
  [views.includes]
  header = "MainHeader"
  footer = "MainFooter"
  
  [views.includes.sidebar]
  name = "SidebarWidget"
  type = "widget"
  props = { collapsible = true }
  
  [views.components]
  list = "ItemList"
  detail = "ItemDetail"
  filter = "FilterComponent"

// Controller logic
[controllers]
handler = "async function(params) { return { param: params.param }; }"

  [controllers.actions]
  loadItems = "async function() { return []; }"
  saveItem = "async function(item) { return item; }"
  
  [controllers.hooks]
  beforeRender = ["function(context) { console.log('Before render'); }"]
  afterRender = ["function(context) { console.log('After render'); }"]
  
  [controllers.middleware]
  auth = "function(req, res, next) { next(); }"
  cache = "function(req, res, next) { next(); }"

// Meta information
[meta]
title = "Example Page"
description = "This is an example page"
keywords = ["example", "page", "rotas"]
type = "dynamic"
isCollection = false

// Source information
[source]
type = "markdown"
path = "src/content/examples"
collection = "examples"

// Rendering strategy
[renderer]
type = "static" # or "dynamic", "ssr", "csr", "hybrid"
priority = "high"
cache = 3600 # Cache time in seconds

// Child routes
[children]
  [children.subpath]
  pattern = "/example/:param/subpath"
  views = { component = "SubComponent" }
  meta = { title = "Sub Path" }
  
  [children.detail]
  pattern = "/example/:param/detail"
  views = { component = "DetailComponent" }
  meta = { title = "Detail Path" }
