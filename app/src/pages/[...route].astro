---
import { generateContentPaths } from "@/modules/content-loader";
import { flattenRoutes, routes } from "@/routes/routes";

export async function getStaticPaths() {
  try {
    // Get all routes from the configuration
    const flattened = flattenRoutes(routes);
    
    // Filter out the root route - will be handled by index.astro
    const filteredRoutes = flattened.filter(route => 
      route.path !== '/' && route.path !== ''
    );
    
    // Map regular routes to Astro's expected params/props format
    const regularPaths = filteredRoutes.map(route => {
      // Remove leading slash for Astro's route parameter format
      const routeParam = route.path.startsWith('/') 
        ? route.path.substring(1) 
        : route.path;
      
      return {
        params: { route: routeParam },
        props: { path: route.path }
      };
    });
    
    // Generate paths for all content collections (tech, blog, docs, tutorials, pages)
    const contentPaths = await generateContentPaths();
    
    // Log the number of paths generated
    console.log(`[SSG] Generated ${regularPaths.length} regular paths and ${contentPaths.length} content paths`);
    
    // Combine all paths
    const combinedPaths = [...regularPaths, ...contentPaths];
    
    // Log the total number of paths for debugging
    console.log(`[SSG] Total paths generated: ${combinedPaths.length}`);
    
    // Ensure we have at least some fallback routes in case of issues
    if (combinedPaths.length === 0) {
      console.warn('[SSG] No paths generated, adding fallback routes');
      return [
        { params: { route: 'blog' }, props: { path: '/blog' } },
        { params: { route: 'tech' }, props: { path: '/tech' } },
        { params: { route: 'about' }, props: { path: '/about' } },
      ];
    }
    
    return combinedPaths;
  } catch (error) {
    console.error('Error generating static paths:', error);
    return [
      { params: { route: 'blog' }, props: { path: '/blog' } },
      { params: { route: 'tech' }, props: { path: '/tech' } },
      { params: { route: 'about' }, props: { path: '/about' } },
    ];
  }
}
---


